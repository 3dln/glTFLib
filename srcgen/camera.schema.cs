//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.49.0 (Newtonsoft.Json v11.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace glTFLib.Gen
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlTFProperty 
    {
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extensions { get; set; } = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlTFProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTFProperty>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GlTFChildOfRootProperty : GlTFProperty
    {
        /// <summary>The user-defined name of this object.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GlTFChildOfRootProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTFChildOfRootProperty>(data);
        }
    
    }
    
    /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Camera : GlTFProperty
    {
        /// <summary>The floating-point horizontal magnification of the view. Must not be zero.</summary>
        [Newtonsoft.Json.JsonProperty("xmag", Required = Newtonsoft.Json.Required.Always)]
        public double Xmag { get; set; }
    
        /// <summary>The floating-point vertical magnification of the view. Must not be zero.</summary>
        [Newtonsoft.Json.JsonProperty("ymag", Required = Newtonsoft.Json.Required.Always)]
        public double Ymag { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Camera FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera>(data);
        }
    
    }
    
    /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Camera2 : GlTFProperty
    {
        /// <summary>The floating-point aspect ratio of the field of view.</summary>
        [Newtonsoft.Json.JsonProperty("aspectRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double AspectRatio { get; set; }
    
        /// <summary>The floating-point vertical field of view in radians.</summary>
        [Newtonsoft.Json.JsonProperty("yfov", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Yfov { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Camera2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera2>(data);
        }
    
    }
    
    /// <summary>A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Camera3 : GlTFChildOfRootProperty
    {
        /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("orthographic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Camera Orthographic { get; set; } = new Camera();
    
        /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("perspective", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Camera2 Perspective { get; set; } = new Camera2();
    
        /// <summary>Specifies if the camera uses a perspective or orthographic projection.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Type Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Camera3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera3>(data);
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.49.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Type 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Type FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type>(data);
        }
    
    }
}