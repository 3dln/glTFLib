//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v9.10.50.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------

namespace glTFLib.Gen
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlTFProperty 
    {
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, object> Extensions { get; set; } = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static GlTFProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTFProperty>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlTFChildOfRootProperty : GlTFProperty
    {
        /// <summary>The user-defined name of this object.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static GlTFChildOfRootProperty FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTFChildOfRootProperty>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Indices of those attributes that deviate from their initialization value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Accessor : GlTFProperty
    {
        /// <summary>The index of the bufferView with sparse indices. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.Always)]
        public int BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes. Must be aligned.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The indices data type.</summary>
        [Newtonsoft.Json.JsonProperty("componentType", Required = Newtonsoft.Json.Required.Always)]
        public ComponentType ComponentType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Accessor FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessor>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Array of size `accessor.sparse.count` times number of components storing the displaced accessor attributes pointed by `accessor.sparse.indices`.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Accessor2 : GlTFProperty
    {
        /// <summary>The index of the bufferView with sparse values. Referenced bufferView can't have ARRAY_BUFFER or ELEMENT_ARRAY_BUFFER target.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.Always)]
        public int BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes. Must be aligned.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Accessor2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessor2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Sparse storage of attributes that deviate from their initialization value.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Accessor3 : GlTFProperty
    {
        /// <summary>Number of entries stored in the sparse array.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Count { get; set; }
    
        /// <summary>Index array of size `count` that points to those accessor attributes that deviate from their initialization value. Indices must strictly increase.</summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Accessor Indices { get; set; } = new Accessor();
    
        /// <summary>Array of size `count` times number of components, storing the displaced accessor attributes pointed by `indices`. Substituted values must have the same `componentType` and number of components as the base accessor.</summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Accessor2 Values { get; set; } = new Accessor2();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Accessor3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessor3>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Accessor4 : GlTFChildOfRootProperty
    {
        /// <summary>The index of the bufferView.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BufferView { get; set; }
    
        /// <summary>The offset relative to the start of the bufferView in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The datatype of components in the attribute.</summary>
        [Newtonsoft.Json.JsonProperty("componentType", Required = Newtonsoft.Json.Required.Always)]
        public ComponentType2 ComponentType { get; set; }
    
        /// <summary>Specifies whether integer data values should be normalized.</summary>
        [Newtonsoft.Json.JsonProperty("normalized", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Normalized { get; set; } = false;
    
        /// <summary>The number of attributes referenced by this accessor.</summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int Count { get; set; }
    
        /// <summary>Specifies if the attribute is a scalar, vector, or matrix.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Type Type { get; set; }
    
        /// <summary>Maximum value of each component in this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("max", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Max { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>Minimum value of each component in this attribute.</summary>
        [Newtonsoft.Json.JsonProperty("min", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Min { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>Sparse storage of attributes that deviate from their initialization value.</summary>
        [Newtonsoft.Json.JsonProperty("sparse", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Accessor3 Sparse { get; set; } = new Accessor3();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Accessor4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Accessor4>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>The index of the node and TRS property that an animation channel targets.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Animation : GlTFProperty
    {
        /// <summary>The index of the node to target.</summary>
        [Newtonsoft.Json.JsonProperty("node", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Node { get; set; }
    
        /// <summary>The name of the node's TRS property to modify, or the "weights" of the Morph Targets it instantiates. For the "translation" property, the values that are provided by the sampler are the translation along the x, y, and z axes. For the "rotation" property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the "scale" property, the values are the scaling factors along the x, y, and z axes.</summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        public Path Path { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Animation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Animation>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Targets an animation's sampler at a node's property.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Animation2 : GlTFProperty
    {
        /// <summary>The index of a sampler in this animation used to compute the value for the target.</summary>
        [Newtonsoft.Json.JsonProperty("sampler", Required = Newtonsoft.Json.Required.Always)]
        public int Sampler { get; set; }
    
        /// <summary>The index of the node and TRS property to target.</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Animation Target { get; set; } = new Animation();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Animation2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Animation2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Animation3 : GlTFProperty
    {
        /// <summary>The index of an accessor containing keyframe input values, e.g., time.</summary>
        [Newtonsoft.Json.JsonProperty("input", Required = Newtonsoft.Json.Required.Always)]
        public int Input { get; set; }
    
        /// <summary>Interpolation algorithm.</summary>
        [Newtonsoft.Json.JsonProperty("interpolation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Interpolation Interpolation { get; set; }
    
        /// <summary>The index of an accessor, containing keyframe output values.</summary>
        [Newtonsoft.Json.JsonProperty("output", Required = Newtonsoft.Json.Required.Always)]
        public int Output { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Animation3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Animation3>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A keyframe animation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Animation4 : GlTFChildOfRootProperty
    {
        /// <summary>An array of channels, each of which targets an animation's sampler at a node's property. Different channels of the same animation can't have equal targets.</summary>
        [Newtonsoft.Json.JsonProperty("channels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Animation2> Channels { get; set; } = new System.Collections.Generic.List<Animation2>();
    
        /// <summary>An array of samplers that combines input and output accessors with an interpolation algorithm to define a keyframe graph (but not its target).</summary>
        [Newtonsoft.Json.JsonProperty("samplers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Animation3> Samplers { get; set; } = new System.Collections.Generic.List<Animation3>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Animation4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Animation4>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Metadata about the glTF asset.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Asset : GlTFProperty
    {
        /// <summary>A copyright message suitable for display to credit the content creator.</summary>
        [Newtonsoft.Json.JsonProperty("copyright", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Copyright { get; set; }
    
        /// <summary>Tool that generated this glTF model.  Useful for debugging.</summary>
        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Generator { get; set; }
    
        /// <summary>The glTF version that this asset targets.</summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+\.[0-9]+$")]
        public string Version { get; set; }
    
        /// <summary>The minimum glTF version that this asset targets.</summary>
        [Newtonsoft.Json.JsonProperty("minVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]+\.[0-9]+$")]
        public string MinVersion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Asset FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Asset>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A buffer points to binary geometry, animation, or skins.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Buffer : GlTFChildOfRootProperty
    {
        /// <summary>The uri of the buffer.</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>The length of the buffer in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int ByteLength { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Buffer FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Buffer>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A view into a buffer generally representing a subset of the buffer.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class BufferView : GlTFChildOfRootProperty
    {
        /// <summary>The index of the buffer.</summary>
        [Newtonsoft.Json.JsonProperty("buffer", Required = Newtonsoft.Json.Required.Always)]
        public int Buffer { get; set; }
    
        /// <summary>The offset into the buffer in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int ByteOffset { get; set; } = 0;
    
        /// <summary>The length of the bufferView in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteLength", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int ByteLength { get; set; }
    
        /// <summary>The stride, in bytes.</summary>
        [Newtonsoft.Json.JsonProperty("byteStride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(4, 252)]
        public int ByteStride { get; set; }
    
        /// <summary>The target that the GPU buffer should be bound to.</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Target Target { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static BufferView FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<BufferView>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Camera : GlTFProperty
    {
        /// <summary>The floating-point horizontal magnification of the view. Must not be zero.</summary>
        [Newtonsoft.Json.JsonProperty("xmag", Required = Newtonsoft.Json.Required.Always)]
        public double Xmag { get; set; }
    
        /// <summary>The floating-point vertical magnification of the view. Must not be zero.</summary>
        [Newtonsoft.Json.JsonProperty("ymag", Required = Newtonsoft.Json.Required.Always)]
        public double Ymag { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane. `zfar` must be greater than `znear`.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Camera FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Camera2 : GlTFProperty
    {
        /// <summary>The floating-point aspect ratio of the field of view.</summary>
        [Newtonsoft.Json.JsonProperty("aspectRatio", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double AspectRatio { get; set; }
    
        /// <summary>The floating-point vertical field of view in radians.</summary>
        [Newtonsoft.Json.JsonProperty("yfov", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Yfov { get; set; }
    
        /// <summary>The floating-point distance to the far clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("zfar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Zfar { get; set; }
    
        /// <summary>The floating-point distance to the near clipping plane.</summary>
        [Newtonsoft.Json.JsonProperty("znear", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double Znear { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Camera2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A camera's projection.  A node can reference a camera to apply a transform to place the camera in the scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Camera3 : GlTFChildOfRootProperty
    {
        /// <summary>An orthographic camera containing properties to create an orthographic projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("orthographic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Camera Orthographic { get; set; } = new Camera();
    
        /// <summary>A perspective camera containing properties to create a perspective projection matrix.</summary>
        [Newtonsoft.Json.JsonProperty("perspective", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Camera2 Perspective { get; set; } = new Camera2();
    
        /// <summary>Specifies if the camera uses a perspective or orthographic projection.</summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        public Type2 Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Camera3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Camera3>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Image data used to create a texture. Image can be referenced by URI or `bufferView` index. `mimeType` is required in the latter case.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Image : GlTFChildOfRootProperty
    {
        /// <summary>The uri of the image.</summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }
    
        /// <summary>The image's MIME type.</summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MimeType MimeType { get; set; }
    
        /// <summary>The index of the bufferView that contains the image. Use this instead of the image's uri property.</summary>
        [Newtonsoft.Json.JsonProperty("bufferView", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BufferView { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Image FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Image>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Reference to a texture.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class TextureInfo : GlTFProperty
    {
        /// <summary>The index of the texture.</summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.Always)]
        public int Index { get; set; }
    
        /// <summary>The set index of texture's TEXCOORD attribute used for texture coordinate mapping.</summary>
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public int TexCoord { get; set; } = 0;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static TextureInfo FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<TextureInfo>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material : GlTFProperty
    {
        /// <summary>The material's base color factor.</summary>
        [Newtonsoft.Json.JsonProperty("baseColorFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> BaseColorFactor { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The base color texture.</summary>
        [Newtonsoft.Json.JsonProperty("baseColorTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextureInfo BaseColorTexture { get; set; } = new TextureInfo();
    
        /// <summary>The metalness of the material.</summary>
        [Newtonsoft.Json.JsonProperty("metallicFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double MetallicFactor { get; set; } = 1D;
    
        /// <summary>The roughness of the material.</summary>
        [Newtonsoft.Json.JsonProperty("roughnessFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double RoughnessFactor { get; set; } = 1D;
    
        /// <summary>The metallic-roughness texture.</summary>
        [Newtonsoft.Json.JsonProperty("metallicRoughnessTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextureInfo MetallicRoughnessTexture { get; set; } = new TextureInfo();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Material FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material2 : TextureInfo
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TexCoord { get; set; }
    
        /// <summary>The scalar multiplier applied to each normal vector of the normal texture.</summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Scale { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Material2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material3 : TextureInfo
    {
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Index { get; set; }
    
        [Newtonsoft.Json.JsonProperty("texCoord", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object TexCoord { get; set; }
    
        /// <summary>A scalar multiplier controlling the amount of occlusion applied.</summary>
        [Newtonsoft.Json.JsonProperty("strength", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, 1)]
        public double Strength { get; set; } = 1D;
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Material3 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material3>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>The material appearance of a primitive.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Material4 : GlTFChildOfRootProperty
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        /// <summary>A set of parameter values that are used to define the metallic-roughness material model from Physically-Based Rendering (PBR) methodology. When not specified, all the default values of `pbrMetallicRoughness` apply.</summary>
        [Newtonsoft.Json.JsonProperty("pbrMetallicRoughness", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Material PbrMetallicRoughness { get; set; } = new Material();
    
        /// <summary>The normal map texture.</summary>
        [Newtonsoft.Json.JsonProperty("normalTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Material2 NormalTexture { get; set; } = new Material2();
    
        /// <summary>The occlusion map texture.</summary>
        [Newtonsoft.Json.JsonProperty("occlusionTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Material3 OcclusionTexture { get; set; } = new Material3();
    
        /// <summary>The emissive map texture.</summary>
        [Newtonsoft.Json.JsonProperty("emissiveTexture", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TextureInfo EmissiveTexture { get; set; } = new TextureInfo();
    
        /// <summary>The emissive color of the material.</summary>
        [Newtonsoft.Json.JsonProperty("emissiveFactor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> EmissiveFactor { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The alpha rendering mode of the material.</summary>
        [Newtonsoft.Json.JsonProperty("alphaMode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AlphaMode AlphaMode { get; set; }
    
        /// <summary>The alpha cutoff value of the material.</summary>
        [Newtonsoft.Json.JsonProperty("alphaCutoff", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Range(0, int.MaxValue)]
        public double AlphaCutoff { get; set; } = 0.5D;
    
        /// <summary>Specifies whether the material is double sided.</summary>
        [Newtonsoft.Json.JsonProperty("doubleSided", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DoubleSided { get; set; } = false;
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Material4 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Material4>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Geometry to be rendered with the given material.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mesh : GlTFProperty
    {
        /// <summary>A dictionary object, where each key corresponds to mesh attribute semantic and each value is the index of the accessor containing attribute's data.</summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.Dictionary<string, int> Attributes { get; set; } = new System.Collections.Generic.Dictionary<string, int>();
    
        /// <summary>The index of the accessor that contains the indices.</summary>
        [Newtonsoft.Json.JsonProperty("indices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Indices { get; set; }
    
        /// <summary>The index of the material to apply to this primitive when rendering.</summary>
        [Newtonsoft.Json.JsonProperty("material", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Material { get; set; }
    
        /// <summary>The type of primitives to render.</summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Mode Mode { get; set; }
    
        /// <summary>An array of Morph Targets, each  Morph Target is a dictionary mapping attributes (only `POSITION`, `NORMAL`, and `TANGENT` supported) to their deviations in the Morph Target.</summary>
        [Newtonsoft.Json.JsonProperty("targets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, int>> Targets { get; set; } = new System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, int>>();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Mesh FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mesh>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A set of primitives to be rendered.  A node can contain one mesh.  A node's transform places the mesh in the scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mesh2 : GlTFChildOfRootProperty
    {
        /// <summary>An array of primitives, each defining geometry to be rendered with a material.</summary>
        [Newtonsoft.Json.JsonProperty("primitives", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<Mesh> Primitives { get; set; } = new System.Collections.Generic.List<Mesh>();
    
        /// <summary>Array of weights to be applied to the Morph Targets.</summary>
        [Newtonsoft.Json.JsonProperty("weights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Weights { get; set; } = new System.Collections.Generic.List<double>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Mesh2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mesh2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A node in the node hierarchy.  When the node contains `skin`, all `mesh.primitives` must contain `JOINTS_0` and `WEIGHTS_0` attributes.  A node can have either a `matrix` or any combination of `translation`/`rotation`/`scale` (TRS) properties. TRS properties are converted to matrices and postmultiplied in the `T * R * S` order to compose the transformation matrix; first the scale is applied to the vertices, then the rotation, and then the translation. If none are provided, the transform is the identity. When a node is targeted for animation (referenced by an animation.channel.target), only TRS properties may be present; `matrix` will not be present.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Node : GlTFChildOfRootProperty
    {
        /// <summary>The index of the camera referenced by this node.</summary>
        [Newtonsoft.Json.JsonProperty("camera", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Camera { get; set; }
    
        /// <summary>The indices of this node's children.</summary>
        [Newtonsoft.Json.JsonProperty("children", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Children { get; set; } = new System.Collections.Generic.List<int>();
    
        /// <summary>The index of the skin referenced by this node.</summary>
        [Newtonsoft.Json.JsonProperty("skin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Skin { get; set; }
    
        /// <summary>A floating-point 4x4 transformation matrix stored in column-major order.</summary>
        [Newtonsoft.Json.JsonProperty("matrix", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Matrix { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The index of the mesh in this node.</summary>
        [Newtonsoft.Json.JsonProperty("mesh", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Mesh { get; set; }
    
        /// <summary>The node's unit quaternion rotation in the order (x, y, z, w), where w is the scalar.</summary>
        [Newtonsoft.Json.JsonProperty("rotation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Rotation { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The node's non-uniform scale, given as the scaling factors along the x, y, and z axes.</summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Scale { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The node's translation along the x, y, and z axes.</summary>
        [Newtonsoft.Json.JsonProperty("translation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Translation { get; set; } = new System.Collections.Generic.List<double>();
    
        /// <summary>The weights of the instantiated Morph Target. Number of elements must match number of Morph Targets of used mesh.</summary>
        [Newtonsoft.Json.JsonProperty("weights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<double> Weights { get; set; } = new System.Collections.Generic.List<double>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Node FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Node>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Texture sampler properties for filtering and wrapping modes.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Sampler : GlTFChildOfRootProperty
    {
        /// <summary>Magnification filter.</summary>
        [Newtonsoft.Json.JsonProperty("magFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MagFilter MagFilter { get; set; }
    
        /// <summary>Minification filter.</summary>
        [Newtonsoft.Json.JsonProperty("minFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MinFilter MinFilter { get; set; }
    
        /// <summary>s wrapping mode.</summary>
        [Newtonsoft.Json.JsonProperty("wrapS", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WrapS WrapS { get; set; }
    
        /// <summary>t wrapping mode.</summary>
        [Newtonsoft.Json.JsonProperty("wrapT", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WrapT WrapT { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Sampler FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Sampler>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>The root nodes of a scene.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Scene : GlTFChildOfRootProperty
    {
        /// <summary>The indices of each root node.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<int> Nodes { get; set; } = new System.Collections.Generic.List<int>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Scene FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scene>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>Joints and matrices defining a skin.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Skin : GlTFChildOfRootProperty
    {
        /// <summary>The index of the accessor containing the floating-point 4x4 inverse-bind matrices.  The default is that each matrix is a 4x4 identity matrix, which implies that inverse-bind matrices were pre-applied.</summary>
        [Newtonsoft.Json.JsonProperty("inverseBindMatrices", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int InverseBindMatrices { get; set; }
    
        /// <summary>The index of the node used as a skeleton root. When undefined, joints transforms resolve to scene root.</summary>
        [Newtonsoft.Json.JsonProperty("skeleton", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Skeleton { get; set; }
    
        /// <summary>Indices of skeleton nodes, used as joints in this skin.</summary>
        [Newtonsoft.Json.JsonProperty("joints", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.List<int> Joints { get; set; } = new System.Collections.Generic.List<int>();
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Skin FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Skin>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>A texture and its sampler.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Texture : GlTFChildOfRootProperty
    {
        /// <summary>The index of the sampler used by this texture. When undefined, a sampler with repeat wrapping and auto filtering should be used.</summary>
        [Newtonsoft.Json.JsonProperty("sampler", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sampler { get; set; }
    
        /// <summary>The index of the image used by this texture.</summary>
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Texture FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Texture>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    /// <summary>The root object for a glTF asset.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class GlTF : GlTFProperty
    {
        /// <summary>Names of glTF extensions used somewhere in this asset.</summary>
        [Newtonsoft.Json.JsonProperty("extensionsUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExtensionsUsed { get; set; } = new System.Collections.Generic.List<string>();
    
        /// <summary>Names of glTF extensions required to properly load this asset.</summary>
        [Newtonsoft.Json.JsonProperty("extensionsRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<string> ExtensionsRequired { get; set; } = new System.Collections.Generic.List<string>();
    
        /// <summary>An array of accessors.</summary>
        [Newtonsoft.Json.JsonProperty("accessors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Accessor4> Accessors { get; set; } = new System.Collections.Generic.List<Accessor4>();
    
        /// <summary>An array of keyframe animations.</summary>
        [Newtonsoft.Json.JsonProperty("animations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Animation4> Animations { get; set; } = new System.Collections.Generic.List<Animation4>();
    
        /// <summary>Metadata about the glTF asset.</summary>
        [Newtonsoft.Json.JsonProperty("asset", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Asset Asset { get; set; } = new Asset();
    
        /// <summary>An array of buffers.</summary>
        [Newtonsoft.Json.JsonProperty("buffers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Buffer> Buffers { get; set; } = new System.Collections.Generic.List<Buffer>();
    
        /// <summary>An array of bufferViews.</summary>
        [Newtonsoft.Json.JsonProperty("bufferViews", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<BufferView> BufferViews { get; set; } = new System.Collections.Generic.List<BufferView>();
    
        /// <summary>An array of cameras.</summary>
        [Newtonsoft.Json.JsonProperty("cameras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Camera3> Cameras { get; set; } = new System.Collections.Generic.List<Camera3>();
    
        /// <summary>An array of images.</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Image> Images { get; set; } = new System.Collections.Generic.List<Image>();
    
        /// <summary>An array of materials.</summary>
        [Newtonsoft.Json.JsonProperty("materials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Material4> Materials { get; set; } = new System.Collections.Generic.List<Material4>();
    
        /// <summary>An array of meshes.</summary>
        [Newtonsoft.Json.JsonProperty("meshes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Mesh2> Meshes { get; set; } = new System.Collections.Generic.List<Mesh2>();
    
        /// <summary>An array of nodes.</summary>
        [Newtonsoft.Json.JsonProperty("nodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Node> Nodes { get; set; } = new System.Collections.Generic.List<Node>();
    
        /// <summary>An array of samplers.</summary>
        [Newtonsoft.Json.JsonProperty("samplers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Sampler> Samplers { get; set; } = new System.Collections.Generic.List<Sampler>();
    
        /// <summary>The index of the default scene.</summary>
        [Newtonsoft.Json.JsonProperty("scene", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Scene { get; set; }
    
        /// <summary>An array of scenes.</summary>
        [Newtonsoft.Json.JsonProperty("scenes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Scene> Scenes { get; set; } = new System.Collections.Generic.List<Scene>();
    
        /// <summary>An array of skins.</summary>
        [Newtonsoft.Json.JsonProperty("skins", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Skin> Skins { get; set; } = new System.Collections.Generic.List<Skin>();
    
        /// <summary>An array of textures.</summary>
        [Newtonsoft.Json.JsonProperty("textures", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.List<Texture> Textures { get; set; } = new System.Collections.Generic.List<Texture>();
    
        [Newtonsoft.Json.JsonProperty("extensions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extensions { get; set; }
    
        [Newtonsoft.Json.JsonProperty("extras", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Extras { get; set; }
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static GlTF FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlTF>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ComponentType 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static ComponentType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentType>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class ComponentType2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static ComponentType2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentType2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Type 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Type FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Path 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Path FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Path>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Interpolation 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Interpolation FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Interpolation>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Target 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Target FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Target>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Type2 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Type2 FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Type2>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MimeType 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static MimeType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MimeType>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class AlphaMode 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static AlphaMode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AlphaMode>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class Mode 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static Mode FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Mode>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MagFilter 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static MagFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MagFilter>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class MinFilter 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static MinFilter FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<MinFilter>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WrapS 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static WrapS FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrapS>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.50.0 (Newtonsoft.Json v9.0.0.0)")]
    public partial class WrapT 
    {
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
        
        public static WrapT FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<WrapT>(data, new Newtonsoft.Json.JsonSerializerSettings { PreserveReferencesHandling = Newtonsoft.Json.PreserveReferencesHandling.All });
        }
    
    }
}